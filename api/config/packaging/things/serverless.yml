# service name
service: things

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# all custom variables will only go under custom root. serverless does not allow any other root name
custom: 
  paths:
    configPath: "./../../../config/config"
    functionPath: "./../../../config/functions"

  constants: ${file(${self:custom.paths.configPath}/constants.serverless.yml)}
  authrizerArn: arn:aws:lambda:${self:provider.region}:${self:provider.environment.accountNo}:function:${self:custom.constants.authrizer}:${self:provider.stage}
  
provider:
  # fixed - cannot change
  name: aws
  # fixed - cannot change
  runtime: nodejs6.10
  # default role for most of the functions for specific functions use role in function
  role: ${self:custom.constants.defaults.role}
  # default function versoning is on required for serverless-alias plugin
  versionFunctions: ${self:custom.constants.defaults.versionFunctions}
  stage: ${opt:stage, self:custom.constants.defaults.stage}
  region: ${self:custom.constants.defaults.region}
  memorySize: ${self:custom.constants.defaults.memorySize}
  timeout: ${self:custom.constants.defaults.timeout}
  deploymentBucket: ${self:custom.constants.defaults.deploymentBucketName}

  vpc: ${file(${self:custom.paths.configPath}/vpc.serverless.yml)}
  environment: ${file(${self:custom.paths.configPath}/environment.serverless.yml):${self:provider.alias}}

  # you can add packaging information here
package:
  include: ${file(${self:custom.paths.configPath}/includes.serverless.yml)}
  exclude: ${file(${self:custom.paths.configPath}/excludes.serverless.yml)}

plugins:
  - serverless-offline
  - serverless-aws-alias

resources:
  Resources:
    # change default generated api name
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:custom.constants.defaults.prefix}${self:service}

functions:

  customauthorizer:
    handler: handlers/iam.customauthorizer
    name: ${self:custom.constants.defaults.prefix}${self:service}-authorizer

  # beacons
  routeBeacons: ${file(${self:custom.paths.functionPath}/beacons/beacons.yml)}
  
  # getThings: ${file(${self:custom.paths.functionPath}/beacons/getbeacons.yml)}
  # getThingByID: ${file(${self:custom.paths.functionPath}/beacons/getbeaconbyid.yml)}
  # saveThing: ${file(${self:custom.paths.functionPath}/beacons/savebeacon.yml)}
  # updateThing: ${file(${self:custom.paths.functionPath}/beacons/updatebeacon.yml)}
  getFilteredThings: ${file(${self:custom.paths.functionPath}/beacons/filterbeacons.yml)}
  #syncBeacons: ${file(${self:custom.paths.functionPath}/beacons/syncbeacons.yml)}

  # Temperatur Tags
  routeTempTags: ${file(${self:custom.paths.functionPath}/temptags/tempTags.yml)}
  
  # getTempTags: ${file(${self:custom.paths.functionPath}/temptags/gettemptags.yml)}
  # getTempTagByID: ${file(${self:custom.paths.functionPath}/temptags/gettemptagbyid.yml)}
  # saveTempTag: ${file(${self:custom.paths.functionPath}/temptags/savetemptag.yml)}
  # updateTempTag: ${file(${self:custom.paths.functionPath}/temptags/updatetemptag.yml)}
  # productScanHistory: ${file(${self:custom.paths.functionPath}/temptags/productScanHistory.yml)}
  
  # thing - gateway
  routeGateways: ${file(${self:custom.paths.functionPath}/gateways/gateways.yml)}  
  # getGateways: ${file(${self:custom.paths.functionPath}/gateways/getgateways.yml)}
  # getGatewayById: ${file(${self:custom.paths.functionPath}/gateways/getgatewaybyid.yml)}
  # saveGateway: ${file(${self:custom.paths.functionPath}/gateways/savegateway.yml)}
  # updateGateway: ${file(${self:custom.paths.functionPath}/gateways/updategateway.yml)}
  #gatewaySync: ${file(${self:custom.paths.functionPath}/gateways/gatewaysync.yml)}

  # thing - devices
  routeDevices: ${file(${self:custom.paths.functionPath}/devices/devices.yml)}
  # getDevices: ${file(${self:custom.paths.functionPath}/devices/getdevice.yml)}
  linkDevice: ${file(${self:custom.paths.functionPath}/devices/linkDevice.yml)}
  unlinkDevice: ${file(${self:custom.paths.functionPath}/devices/unlinkDevice.yml)}
  # getDeviceById: ${file(${self:custom.paths.functionPath}/devices/getdevicebyid.yml)}
  # saveDevice: ${file(${self:custom.paths.functionPath}/devices/savedevice.yml)}
  # updateDevice: ${file(${self:custom.paths.functionPath}/devices/updatedevice.yml)}
  updateDeviceStatus: ${file(${self:custom.paths.functionPath}/devices/updateDeviceStatus.yml)}
  
  # NFC Tags
  routeNfcTags: ${file(${self:custom.paths.functionPath}/nfcTag/nfcTags.yml)}
  
  # getNfcTags: ${file(${self:custom.paths.functionPath}/nfcTag/getnfctags.yml)}
  # getNfcTagByID: ${file(${self:custom.paths.functionPath}/nfcTag/getnfctagbyid.yml)}
  # saveNfcTag: ${file(${self:custom.paths.functionPath}/nfcTag/savenfctag.yml)}
  # updateNfcTag: ${file(${self:custom.paths.functionPath}/nfcTag/updatenfctag.yml)}
  # nfcTagProductScanHistory: ${file(${self:custom.paths.functionPath}/nfcTag/productScanHistory.yml)}

  #thing
  fetchthing: ${file(${self:custom.paths.functionPath}/things/fetchthing.yml)}
  associatablethings: ${file(${self:custom.paths.functionPath}/things/associatablethings.yml)}
  
  syncthings:  ${file(${self:custom.paths.functionPath}/syncjob/syncjob.yml)}
