# service name
service: attributes

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# all custom variables will only go under custom root. serverless does not allow any other root name
custom: 
  paths:
    configPath: "./../../../config/config"
    functionPath: "./../../../config/functions"
  documentation:
    info:
      version: "2" # see note above about this being ignored
      title: "Attributes" # see note above about this being ignored
      description: "This is the best API ever"
      termsOfService: "http://www.example.com/terms-of-service"
      contact:
        name: "Aman"
        url: "http://www.example.com/me"
        email: "js@example.com"
      license:
        name: "Licensing"
        url: "http://www.example.com/licensing"
    tags:
      -
        name: "Data Creation"
        description: "Services to create things"
      -
        name: "Some other tag"
        description: "A tag for other things"
    authorizers:
      -
        name: "Authorizer"
        description: "This is an error"
    resources:
      -
        path: "/"
        description: "This is the description for some/path"
      -
        path: "some/other/path"
        description: "This is the description for some/other/path"
  models:
    ErrorResponse:
      ContentType: "application/json"
      Schema: ${file(models/documentation/error.json)}
    CreateRequest:
      ContentType: "application/json"
      Schema: ${file(models/documentation/create_request.json)}
    CreateResponse:
      ContentType: "application/json"
      Schema: ${file(models/documentation/create_response.json)}
  constants: ${file(${self:custom.paths.configPath}/constants.serverless.yml)}
  authrizerArn: arn:aws:lambda:${self:provider.region}:${self:provider.environment.accountNo}:function:${self:custom.constants.authrizer}:${self:provider.stage}
  
provider:
  # fixed - cannot change
  name: aws
  # fixed - cannot change
  runtime: nodejs6.10
  # default role for most of the functions for specific functions use role in function
  role: ${self:custom.constants.defaults.role}
  # default function versoning is on required for serverless-alias plugin
  versionFunctions: ${self:custom.constants.defaults.versionFunctions}
  stage: ${opt:stage, self:custom.constants.defaults.stage}
  region: ${self:custom.constants.defaults.region}
  memorySize: ${self:custom.constants.defaults.memorySize}
  timeout: ${self:custom.constants.defaults.timeout}
  deploymentBucket: ${self:custom.constants.defaults.deploymentBucketName}

  vpc: ${file(${self:custom.paths.configPath}/vpc.serverless.yml)}
  environment: ${file(${self:custom.paths.configPath}/environment.serverless.yml):${self:provider.alias}}

  # you can add packaging information here
package:
  include: ${file(${self:custom.paths.configPath}/includes.serverless.yml)}
  exclude: ${file(${self:custom.paths.configPath}/excludes.serverless.yml)}

plugins:
  - serverless-offline
  - serverless-aws-alias
  - serverless-aws-documentation

resources:
  Resources:
    # change default generated api name
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:custom.constants.defaults.prefix}${self:service}

functions:

  customauthorizer:
    handler: handlers/iam.customauthorizer
    name: ${self:custom.constants.defaults.prefix}${self:service}-authorizer

  # attributes
  routeAttributes: ${file(${self:custom.paths.functionPath}/attributes/attributes.yml)}
