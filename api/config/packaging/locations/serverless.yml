# service name
service: locations

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

# all custom variables will only go under custom root. serverless does not allow any other root name
custom: 
  paths:
    configPath: "./../../../config/config"
    functionPath: "./../../../config/functions"

  constants: ${file(${self:custom.paths.configPath}/constants.serverless.yml)}

provider:
  # fixed - cannot change
  name: aws
  # fixed - cannot change
  runtime: nodejs6.10
  # default role for most of the functions for specific functions use role in function
  role: ${self:custom.constants.defaults.role}
  # default function versoning is on required for serverless-alias plugin
  versionFunctions: ${self:custom.constants.defaults.versionFunctions}
  stage: ${opt:stage, self:custom.constants.defaults.stage}
  region: ${self:custom.constants.defaults.region}
  memorySize: ${self:custom.constants.defaults.memorySize}
  timeout: ${self:custom.constants.defaults.timeout}
  deploymentBucket: ${self:custom.constants.defaults.deploymentBucketName}

  vpc: ${file(${self:custom.paths.configPath}/vpc.serverless.yml)}
  environment: ${file(${self:custom.paths.configPath}/environment.serverless.yml):${self:provider.alias}}

  # you can add packaging information here
package:
  include: ${file(${self:custom.paths.configPath}/includes.serverless.yml)}
  exclude: ${file(${self:custom.paths.configPath}/excludes.serverless.yml)}

plugins:
  - serverless-offline
  - serverless-aws-alias

resources:
  Resources:
    # change default generated api name
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:custom.constants.defaults.prefix}${self:service}

functions:

  customauthorizer:
    handler: handlers/iam.customauthorizer
    name: ${self:custom.constants.defaults.prefix}${self:service}-authorizer

  getLocation: ${file(${self:custom.paths.functionPath}/locations/core/coregetlocations.yml)}
  getLocationByID: ${file(${self:custom.paths.functionPath}/locations/core/coregetlocationbyid.yml)}
  saveLocation: ${file(${self:custom.paths.functionPath}/locations/core/coresavelocation.yml)}
  updateLocation: ${file(${self:custom.paths.functionPath}/locations/core/coreupdatelocation.yml)}
  getFloors: ${file(${self:custom.paths.functionPath}/locations/core/coregetfloors.yml)}
  getFloorByID: ${file(${self:custom.paths.functionPath}/locations/core/coregetfloorbyid.yml)}
  saveFloor: ${file(${self:custom.paths.functionPath}/locations/core/coresavefloor.yml)}
  updateFloor: ${file(${self:custom.paths.functionPath}/locations/core/coreupdatefloor.yml)}
  
  getZones: ${file(${self:custom.paths.functionPath}/locations/core/coregetzones.yml)}
  getZoneByID: ${file(${self:custom.paths.functionPath}/locations/core/coregetzonebyid.yml)}
  saveZone: ${file(${self:custom.paths.functionPath}/locations/core/coresavezone.yml)}
  updateZone: ${file(${self:custom.paths.functionPath}/locations/core/coreupdatezone.yml)}
  getProductsinFloorsZone: ${file(${self:custom.paths.functionPath}/locations/core/getProductsinFloorsZone.yml)}
  getFloorsInLocationInventory: ${file(${self:custom.paths.functionPath}/locations/core/getFloorsInLocationInventory.yml)}
  
  getZonesByFloorId: ${file(${self:custom.paths.functionPath}/locations/core/getZonesInFloor.yml)}
  getFloorsByLocationId: ${file(${self:custom.paths.functionPath}/locations/core/getFloorsInLocation.yml)}
  getProductsOnZone: ${file(${self:custom.paths.functionPath}/locations/core/getProductsOnZone.yml)}
  # akngGetLocation: ${file(${self:custom.paths.functionPath}/locations/nggetlocations.yml)}
  getLocationUnauth: ${file(${self:custom.paths.functionPath}/locations/getlocationsunauth.yml)}
  getLocationByIdNoAuth: ${file(${self:custom.paths.functionPath}/locations/getlocationbyidnoauth.yml)}
  # akngGetLocationByID: ${file(${self:custom.paths.functionPath}/locations/nggetlocationbyid.yml)}
  # akngSaveLocation: ${file(${self:custom.paths.functionPath}/locations/ngsavelocation.yml)}    
  # akngUpdateLocation: ${file(${self:custom.paths.functionPath}/locations/ngupdatelocation.yml)}
  getNearbyLocation: ${file(${self:custom.paths.functionPath}/locations/getnearbylocations.yml)}
  findZone: ${file(${self:custom.paths.functionPath}/locations/findzones.yml)}
  getInventoryLocation: ${file(${self:custom.paths.functionPath}/locations/core/coreGetInventoryLocations.yml)}
  # getfloorlist: ${file(${self:custom.paths.functionPath}/locations/getfloorlist.yml)} 
  # getfloorzoneproducts: ${file(${self:custom.paths.functionPath}/locations/getfloorzoneproducts.yml)}
  # getfloorbylocid: ${file(${self:custom.paths.functionPath}/locations/getfloorbylocid.yml)}
